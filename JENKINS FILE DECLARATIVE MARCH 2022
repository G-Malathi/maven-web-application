def sendSlackNotifications(String buildStatus = 'STARTED') {
  
  buildStatus =  buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
}

pipeline{
    
    agent any
    tools {
  maven 'maven3.8.5'
}
options {
  timestamps()
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5'))
}
triggers {
  pollSCM('* * * * *')
 // cron ('* * * * *')
}

    stages{
         stage('CheckoutCode'){
             
             steps{
                 sendSlackNotifications('STARTED')
                git branch: 'development', credentialsId: 'd02b8059-b705-4da9-b3f9-414b65b2db86', url: 'https://github.com/G-Malathi/maven-web-application.git'    
             }
         }
         stage('Build'){
             steps{
                 sh "mvn clean package"
             }
         }
         stage('ExecuteSonarQubeReport'){
             steps{
                 sh "mvn sonar:sonar"
             }
         }
         stage('UploadArtifactIntoNexusServer'){
             steps{
                 sh "mvn deploy"
             }
         }
         stage('DeployApplicationintoTomcatServer'){
             steps{
                 sshagent(['6124963a-f050-4c4e-97b8-aea33aabe034']) {
                  sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@43.204.232.117:/opt/apache-tomcat-9.0.62/webapps/"
            
                 }
            }
         }
        
    }//stages closing
    post {
        
      success {
         sendSlackNotifications(currentBuild.result)
       }
      failure {
        sendSlackNotifications(currentBuild.result)
        }
    }

    
    
}//pipeline closing
